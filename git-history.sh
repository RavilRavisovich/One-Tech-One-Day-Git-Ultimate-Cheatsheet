#!/bin/bash

# Git: История и Теория (версия 1.0)
# Полное руководство по принципам работы Git

cat << "EOF"

  _________.__       .__  __    ___________.__                 
 /   _____/|__| ____ |__|/  |_  \_   _____/|__| ____    ____   
 \_____  \ |  |/ ___\|  \   __\  |    __)  |  |/    \  / ___\  
 /        \|  / /_/  >  ||  |    |     \   |  |   |  \/ /_/  > 
/_______  /|__\___  /|__||__|    \___  /   |__|___|  /\___  /  
        \/   /_____/                 \/            \//_____/   

EOF

# --- ИСТОРИЯ СОЗДАНИЯ GIT ---
echo -e "\033[1;35m\nИСТОРИЯ СОЗДАНИЯ GIT\033[0m"
echo "=================================================="

echo -e "2005: \033[1;34mLinus Torvalds\033[0m создаёт Git для разработки ядра Linux"
echo "   • Причина: конфликт с BitKeeper (проприетарная VCS)"
echo "   • Цели:"
echo "     - Скорость обработки больших проектов"
echo "     - Полная распределённость"
echo "     - Целостность данных через SHA-1"
echo "   • Первый коммит: 7 апреля 2005 года"

echo -e "\n2005-2007: \033[1;34mСтановление экосистемы\033[0m"
echo "   • Junio Hamano становится главным сопровождающим"
echo "   • Реализация протоколов:"
echo "     - Git (специальный протокол)"
echo "     - SSH для безопасной передачи"
echo "     - HTTP/HTTPS для доступности"

echo -e "\n\033[1;32m2008: Рождение GitHub\033[0m"
echo "   • Основатели: Tom Preston-Werner, Chris Wanstrath, PJ Hyett"
echo "   • Инновации:"
echo "     - Pull Request как механизм код-ревью"
echo "     - Визуализация различий (diff)"
echo "     - Социальные функции (follow, stars)"
echo "   • Первый публичный репозиторий: grit (29 апреля 2008)"

echo -e "\n\033[1;33m2011-2014: Формирование рынка Git-платформ\033[0m"
echo "   • 2011: Atlassian покупает Bitbucket ($10M)"
echo "   • 2011: Дмитрий Запорожец создаёт GitLab"
echo "   • 2013: GitHub становится крупнейшим хостингом (5M+ репозиториев)"
echo "   • 2014: GitLab получает $1.5M финансирования"

echo -e "\n\033[1;31m2018: Переломный момент\033[0m"
echo "   • Microsoft приобретает GitHub за $7.5 млрд"
echo "   • Реакция сообщества:"
echo "     - 100K+ репозиториев мигрируют на GitLab за 1 день"
echo "     - GitHub вводит бесплатные приватные репозитории"
echo "   • Технические улучшения:"
echo "     - Git LFS 2.0 для больших файлов"
echo "     - SHA-256 экспериментальная поддержка"

echo -e "\n\033[1;36m2020-2023: Современный этап\033[0m"
echo "   • GitHub Copilot (ИИ-ассистент)"
echo "   • GitLab 14: полный DevSecOps цикл"
echo "   • Статистика 2023:"
echo "     - 100M+ разработчиков"
echo "     - 300M+ репозиториев"
echo "     - 94% компаний используют Git"

# --- АРХИТЕКТУРА GIT ---
echo -e "\033[1;35m\nАРХИТЕКТУРНЫЕ ПРИНЦИПЫ\033[0m"
echo "=================================================="

echo -e "\n\033[1;32m1. Распределённая система\033[0m"
echo "   • Каждый разработчик имеет полную копию репозитория"
echo "   • Нет центрального сервера (опционально)"
echo "   • Пример:"
echo "     - Alice: git clone → коммиты → git push"
echo "     - Bob: git pull → изменения Alice"

echo -e "\n\033[1;33m2. Content-Addressable Storage\033[0m"
echo "   • Все объекты хранятся по SHA-1 хешу"
echo "   • 4 типа объектов:"
echo "     - BLOB: содержимое файлов"
echo "     - TREE: структура каталогов"
echo "     - COMMIT: метаданные коммита"
echo "     - TAG: метка версии"
echo "   • Формат:"
echo "     <тип> <размер>\0<содержимое>"

echo -e "\n\033[1;34m3. Три состояния файлов\033[0m"
echo "   • Working Directory:"
echo "     - Фактические файлы на диске"
echo "     - git restore для отката"
echo "   • Staging Area (Index):"
echo "     - Промежуточная зона"
echo "     - git add для добавления"
echo "   • Git Directory:"
echo "     - Постоянное хранилище"
echo "     - git commit для сохранения"

# --- ПРИНЦИП РАБОТЫ НА ПРИМЕРЕ ---
echo -e "\033[1;35m\nПРАКТИЧЕСКИЙ ПРИМЕР: КАК РАБОТАЕТ GIT\033[0m"
echo "=================================================="

echo -e "\n\033[1;36mСценарий: Создание репозитория и первого коммита\033[0m"
echo "   $ git init project"
echo "   $ cd project"
echo "   $ echo 'Hello' > file.txt"
echo "   $ git add file.txt"
echo "   $ git commit -m 'Initial commit'"

echo -e "\n\033[1;33mШаг 1: Создание BLOB-объекта\033[0m"
echo "   • Вычисление хеша:"
echo "     echo -e 'blob 6\0Hello\n' | shasum"
echo "     → af5626b4a114abcb82d63db7c8082c3c4756e51b"
echo "   • Объект сохраняется в:"
echo "     .git/objects/af/5626b4a11... "

echo -e "\n\033[1;34mШаг 2: Обновление индекса\033[0m"
echo "   • Индекс (.git/index) содержит:"
echo "     - Путь: file.txt"
echo "     - Хеш: af5626b4a11..."
echo "     - Метаданные: права, размер"

echo -e "\n\033[1;35mШаг 3: Создание TREE-объекта\033[0m"
echo "   • При коммите Git создаёт TREE:"
echo "     100644 blob af5626b4... file.txt"
echo "   • Хеш TREE:"
echo "     echo -e 'tree 36\0...' | shasum"
echo "     → 92b8b6ffd0dd..."

echo -e "\n\033[1;36mШаг 4: Создание COMMIT-объекта\033[0m"
echo "   • Структура коммита:"
echo "     tree 92b8b6ffd0dd..."
echo "     author Alice <alice@example.com>"
echo "     committer Alice <alice@example.com>"
echo "     Initial commit"
echo "   • Хеш коммита:"
echo "     echo -e 'commit 180\0...' | shasum"
echo "     → c3d0be041ec9..."

echo -e "\n\033[1;32mШаг 5: Обновление ссылок\033[0m"
echo "   • HEAD → refs/heads/main"
echo "   • refs/heads/main → c3d0be041ec9..."
echo "   • Репозиторий после коммита:"
echo "     .git/"
echo "     ├── objects/"
echo "     │   ├── af/5626b4a11...  # blob"
echo "     │   ├── 92/b8b6ffd0dd...  # tree"
echo "     │   └── c3/d0be041ec9...  # commit"
echo "     └── refs/heads/main → c3d0be0..."

# --- ЭФФЕКТИВНОСТЬ И НАДЕЖНОСТЬ ---
echo -e "\033[1;35m\nТЕХНОЛОГИИ ЭФФЕКТИВНОСТИ\033[0m"
echo "=================================================="

echo -e "\n\033[1;33mДедупликация данных\033[0m"
echo "   • Одинаковые файлы = один BLOB"
echo "   • Пример:"
echo "     - 1000 файлов с одинаковым содержанием"
echo "     - В Git: 1 BLOB + 1000 ссылок"

echo -e "\n\033[1;34mPack-файлы\033[0m"
echo "   • Сжатие похожих объектов"
echo "   • Дельта-компрессия:"
echo "     - Хранение различий между версиями"
echo "   • Автоматическое создание при:"
echo "     - git gc (сборка мусора)"
echo "     - git push"

echo -e "\n\033[1;35mЦелостность данных\033[0m"
echo "   • Все объекты проверяются по SHA-1"
echo "   • Механизмы восстановления:"
echo "     - git fsck: проверка целостности"
echo "     - reflog: журнал изменений HEAD"

# --- БУДУЩЕЕ GIT ---
echo -e "\033[1;35m\nЭВОЛЮЦИЯ И БУДУЩЕЕ\033[0m"
echo "=================================================="

echo -e "\n\033[1;36mТренды развития:\033[0m"
echo "   • Переход на SHA-256:"
echo "     - Проблемы безопасности SHA-1"
echo "     - Поддержка в Git 2.29+"
echo "   • Улучшенная работа с большими файлами:"
echo "     - Git VFS для Windows"
echo "     - Partial Clone (фильтрация по размеру)"

echo -e "\n\033[1;32mИнтеграция с ИИ:\033[0m"
echo "   • Автоматическое описание коммитов"
echo "   • Умное разрешение конфликтов"
echo "   • Прогнозирование проблем кода"

echo -e "\n\033[1;33mСтатистика adoption:\033[0m"
echo "   • 2023: 94% разработчиков используют Git"
echo "   • Альтернативы:"
echo "     - Mercurial (3%)"
echo "     - SVN (2%)"
echo "     - Perforce (1%)"

# --- ЗАКЛЮЧЕНИЕ ---
echo -e "\033[1;35m\nФИЛОСОФИЯ GIT\033[0m"
echo "=================================================="

echo -e "\033[1;34m«Git — это распределённая файловая система с инструментами поверх неё»\033[0m"
echo "   — Linus Torvalds"

echo -e "\n\033[1;32mКлючевые принципы дизайна:\033[0m"
echo "   • Простота базовых структур"
echo "   • Неизменяемость данных"
echo "   • Децентрализация как основа"
echo "   • Открытость для расширений"

echo -e "\n\033[1;33mРесурсы для глубокого изучения:\033[0m"
echo "   • Pro Git Book: https://git-scm.com/book"
echo "   • Git Internals PDF: https://github.com/pluralsight/git-internals-pdf"
echo "   • GitHub Blog: https://github.blog"

echo -e "\n\033[1;37mПоследнее обновление: $(date +"%Y-%m-%d") | Версия теории: 1.2\033[0m"